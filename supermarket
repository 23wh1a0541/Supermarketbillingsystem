package javapractice;
import java.util.ArrayList;
import java.util.Scanner;





class Product {
    private int id;
    private String name;
    private double price;

    public Product(int id, String name, double price) {
        this.id = id;
        this.name = name;
        this.price = price;
    }


    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Price: $" + price;
    }
}

class CartItem {
    private Product product;
    private int quantity;

    public CartItem(Product product, int quantity) {
        this.product = product;
        this.quantity = quantity;
    }

    public Product getProduct() {
        return product;
    }

    public int getQuantity() {
        return quantity;
    }

    public double getTotalPrice() {
        return product.getPrice() * quantity;
    }

    @Override
    public String toString() {
        return product.getName() + " (x" + quantity + ") - $" + getTotalPrice();
    }
}

public class SupermarketBilling {
    private ArrayList<Product> productCatalog = new ArrayList<>();
    private ArrayList<CartItem> cart = new ArrayList<>();

    public SupermarketBilling() {
        // Initializing a product catalog with more items
        productCatalog.add(new Product(1, "Milk", 1.50));
        productCatalog.add(new Product(2, "Bread", 2.00));
        productCatalog.add(new Product(3, "Eggs", 3.00));
        productCatalog.add(new Product(4, "Cheese", 5.00));
        productCatalog.add(new Product(5, "Apples", 2.50));
        productCatalog.add(new Product(6, "Bananas", 1.80));
        productCatalog.add(new Product(7, "Oranges", 2.20));
        productCatalog.add(new Product(8, "Tomatoes", 3.00));
        productCatalog.add(new Product(9, "Cucumber", 1.50));
        productCatalog.add(new Product(10, "Potatoes", 1.20));
        productCatalog.add(new Product(11, "Chicken Breast (1kg)", 7.50));
        productCatalog.add(new Product(12, "Salmon Fillet (500g)", 9.00));
        productCatalog.add(new Product(13, "Rice (1kg)", 2.75));
        productCatalog.add(new Product(14, "Pasta (500g)", 1.80));
        productCatalog.add(new Product(15, "Olive Oil (500ml)", 4.50));
        productCatalog.add(new Product(16, "Sugar (1kg)", 1.60));
        productCatalog.add(new Product(17, "Salt (500g)", 0.80));
        productCatalog.add(new Product(18, "Coffee (250g)", 3.50));
        productCatalog.add(new Product(19, "Tea (50 bags)", 2.20));
        productCatalog.add(new Product(20, "Frozen Peas (500g)", 2.00));
    }

    public void displayCatalog() {
        System.out.println("\nProduct Catalog:");
        for (Product product : productCatalog) {
            System.out.println(product);
        }
    }

    public void addToCart(int productId, int quantity) {
        for (Product product : productCatalog) {
            if (product.getId() == productId) {
                cart.add(new CartItem(product, quantity));
                System.out.println(quantity + " x " + product.getName() + " added to cart.");
                return;
            }
        }
        System.out.println("Product not found.");
    }

    public void displayCart() {
        System.out.println("\nYour Cart:");
        if (cart.isEmpty()) {
            System.out.println("Your cart is empty.");
        } else {
            double total = 0;
            for (CartItem item : cart) {
                System.out.println(item);
                total += item.getTotalPrice();
            }
            System.out.println("Total Price: $" + total);
        }
    }

    public double calculateTotal() {
        double total = 0;
        for (CartItem item : cart) {
            total += item.getTotalPrice();
        }
        return total;
    }

    public void applyDiscount(double discountPercentage) {
        double total = calculateTotal();
        double discount = total * discountPercentage / 100;
        double finalPrice = total - discount;
        System.out.println("Discount Applied: " + discountPercentage + "%");
        System.out.println("Total after Discount: $" + finalPrice);
    }

    public void generateBill() {
        System.out.println("\n---- Supermarket Bill ----");
        double total = 0;
        for (CartItem item : cart) {
            System.out.println(item);
            total += item.getTotalPrice();
        }
        System.out.println("Total Price: $" + total);
        System.out.println("-------------------------");
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        SupermarketBilling supermarketBilling = new SupermarketBilling();

        while (true) {
            System.out.println("\nSupermarket Billing System");
            System.out.println("1. Display Product Catalog");
            System.out.println("2. Add Product to Cart");
            System.out.println("3. View Cart");
            System.out.println("4. Apply Discount");
            System.out.println("5. Generate Bill");
            System.out.println("6. Exit");

            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    supermarketBilling.displayCatalog();
                    break;
                case 2:
                    System.out.print("Enter Product ID: ");
                    int productId = scanner.nextInt();
                    System.out.print("Enter Quantity: ");
                    int quantity = scanner.nextInt();
                    supermarketBilling.addToCart(productId, quantity);
                    break;
                case 3:
                    supermarketBilling.displayCart();
                    break;
                case 4:
                    System.out.print("Enter Discount Percentage: ");
                    double discountPercentage = scanner.nextDouble();
                    supermarketBilling.applyDiscount(discountPercentage);
                    break;
                case 5:
                    supermarketBilling.generateBill();
                    break;
                case 6:
                    System.out.println("Exiting the system. Thank you!");
                    return;
                default:
                    System.out.println("Invalid option, please try again.");
            }
        }
    }
}
